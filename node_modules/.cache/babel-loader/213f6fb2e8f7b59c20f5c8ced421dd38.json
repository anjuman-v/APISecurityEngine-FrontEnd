{"ast":null,"code":"import { Jwt_token } from '../data/config';\nexport const configureFakeBackend = () => {\n  let users = [{\n    email: 'test@gmail.com',\n    password: 'test123'\n  }];\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    const isLoggedIn = opts.headers['Authorization'] === `Bearer ${Jwt_token}`;\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          const params = opts.body;\n          const user = users.find(x => x.email === params.email && x.password === params.password);\n          if (!user) return error('Username or password is incorrect');\n          return ok(Jwt_token);\n        }\n\n        // get users - secure\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised();\n          return ok(users);\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n\n        // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n};\nexport function handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        localStorage.removeItem('token');\n        localStorage.removeItem('profileURL');\n      }\n    }\n    return data;\n  });\n}\nexport function authHeader() {\n  // return authorization header with jwt token\n  const currentUser = localStorage.getItem('token');\n  if (currentUser) {\n    return {\n      Authorization: `Bearer ${currentUser}`\n    };\n  } else {\n    return {};\n  }\n}","map":{"version":3,"names":["Jwt_token","configureFakeBackend","users","email","password","realFetch","window","fetch","url","opts","isLoggedIn","headers","Promise","resolve","reject","setTimeout","endsWith","method","params","body","user","find","x","error","ok","unauthorised","then","response","text","JSON","stringify","status","message","handleResponse","data","parse","indexOf","localStorage","removeItem","authHeader","currentUser","getItem","Authorization"],"sources":["/home/anjuman/Desktop/github/APISecurityEngine-FrontEnd/src/services/fack.backend.jsx"],"sourcesContent":["import {Jwt_token} from '../data/config'\r\nexport const configureFakeBackend = () => {\r\n    let users = [{ email: 'test@gmail.com', password: 'test123'}];\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n        const isLoggedIn = opts.headers['Authorization'] === `Bearer ${Jwt_token}`;\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n                // authenticate - public\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    const params = opts.body;\r\n                    const user = users.find(x => x.email === params.email && x.password === params.password);\r\n                    if (!user) return error('Username or password is incorrect');\r\n                    return ok(Jwt_token);\r\n                }\r\n\r\n                // get users - secure\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    if (!isLoggedIn) return unauthorised();\r\n                    return ok(users);\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n                // private helper functions\r\n\r\n                function ok(body) {\r\n                    resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\r\n                }\r\n\r\n                function unauthorised() {\r\n                    resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\r\n                }\r\n\r\n                function error(message) {\r\n                    \r\n                    resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\r\n                }\r\n            }, 500);\r\n        });\r\n    }\r\n}\r\n\r\nexport function handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if ([401, 403].indexOf(response.status) !== -1) {\r\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\r\n                localStorage.removeItem('token')\r\n                localStorage.removeItem('profileURL')\r\n            }\r\n        }\r\n        return data;\r\n    }); \r\n}\r\n\r\nexport function authHeader() {\r\n    // return authorization header with jwt token\r\n    const currentUser = localStorage.getItem('token')\r\n    if (currentUser) {\r\n        return { Authorization: `Bearer ${currentUser}` };\r\n    }else {\r\n        return {};\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}